// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 27acRQBdiDjAQuC2V3WuRn
// Component: Cj6abINIIJ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MyComponent from "../../MyComponent"; // plasmic-import: f-L2gtuvIT1/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_gap.module.css"; // plasmic-import: 27acRQBdiDjAQuC2V3WuRn/projectcss
import sty from "./PlasmicAsddsa2.module.css"; // plasmic-import: Cj6abINIIJ/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: syO7ezynaxu/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: usT7wQdIWkk/icon

export type PlasmicAsddsa2__VariantMembers = {
  unnamedVariant: "unnamedVariant";
};

export type PlasmicAsddsa2__VariantsArgs = {
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
};

type VariantPropType = keyof PlasmicAsddsa2__VariantsArgs;
export const PlasmicAsddsa2__VariantProps = new Array<VariantPropType>(
  "unnamedVariant"
);

export type PlasmicAsddsa2__ArgsType = {};
type ArgPropType = keyof PlasmicAsddsa2__ArgsType;
export const PlasmicAsddsa2__ArgProps = new Array<ArgPropType>();

export type PlasmicAsddsa2__OverridesType = {
  root?: p.Flex<"div">;
  gapper2?: p.Flex<typeof MyComponent>;
  myComponent?: p.Flex<typeof MyComponent>;
  gapper?: p.Flex<typeof MyComponent>;
};

export interface DefaultAsddsa2Props {}

function PlasmicAsddsa2__RenderFunc(props: {
  variants: PlasmicAsddsa2__VariantsArgs;
  args: PlasmicAsddsa2__ArgsType;
  overrides: PlasmicAsddsa2__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root,
            {
              [sty.rootunnamedVariant]: hasVariant(
                variants,
                "unnamedVariant",
                "unnamedVariant"
              )
            }
          )}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__n9O2K, {
              [sty.imgunnamedVariant__n9O2K36T1]: hasVariant(
                variants,
                "unnamedVariant",
                "unnamedVariant"
              )
            })}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
          />

          {(
            hasVariant(variants, "unnamedVariant", "unnamedVariant")
              ? true
              : false
          ) ? (
            <MyComponent
              data-plasmic-name={"gapper2"}
              data-plasmic-override={overrides.gapper2}
              className={classNames("__wab_instance", sty.gapper2, {
                [sty.gapper2unnamedVariant]: hasVariant(
                  variants,
                  "unnamedVariant",
                  "unnamedVariant"
                )
              })}
              mySlot={
                <span
                  className={classNames(
                    projectcss.all,
                    projectcss.span,
                    projectcss.__wab_text,
                    sty.span___7Uier
                  )}
                >
                  {"Plasmic Studio"}
                </span>
              }
              showText={true}
            />
          ) : null}

          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img___6SegM)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
          />

          <MyComponent
            data-plasmic-name={"myComponent"}
            data-plasmic-override={overrides.myComponent}
            className={classNames("__wab_instance", sty.myComponent)}
            mySlot={"change the text here"}
          />

          <MyComponent
            data-plasmic-name={"gapper"}
            data-plasmic-override={overrides.gapper}
            className={classNames("__wab_instance", sty.gapper, {
              [sty.gapperunnamedVariant]: hasVariant(
                variants,
                "unnamedVariant",
                "unnamedVariant"
              )
            })}
            mySlot={
              <span
                className={classNames(
                  projectcss.all,
                  projectcss.span,
                  projectcss.__wab_text,
                  sty.span__nay0Y
                )}
              >
                {"Plasmic Studio"}
              </span>
            }
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "gapper2", "myComponent", "gapper"],
  gapper2: ["gapper2"],
  myComponent: ["myComponent"],
  gapper: ["gapper"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  gapper2: typeof MyComponent;
  myComponent: typeof MyComponent;
  gapper: typeof MyComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAsddsa2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAsddsa2__VariantsArgs;
    args?: PlasmicAsddsa2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAsddsa2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAsddsa2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAsddsa2__ArgProps,
          internalVariantPropNames: PlasmicAsddsa2__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAsddsa2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAsddsa2";
  } else {
    func.displayName = `PlasmicAsddsa2.${nodeName}`;
  }
  return func;
}

export const PlasmicAsddsa2 = Object.assign(
  // Top-level PlasmicAsddsa2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    gapper2: makeNodeComponent("gapper2"),
    myComponent: makeNodeComponent("myComponent"),
    gapper: makeNodeComponent("gapper"),

    // Metadata about props expected for PlasmicAsddsa2
    internalVariantProps: PlasmicAsddsa2__VariantProps,
    internalArgProps: PlasmicAsddsa2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAsddsa2;
/* prettier-ignore-end */
