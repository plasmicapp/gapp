// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 27acRQBdiDjAQuC2V3WuRn
// Component: 2kk7FFNaQd
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_gap.module.css"; // plasmic-import: 27acRQBdiDjAQuC2V3WuRn/projectcss
import sty from "./PlasmicDsadas.module.css"; // plasmic-import: 2kk7FFNaQd/css

export type PlasmicDsadas__VariantMembers = {};

export type PlasmicDsadas__VariantsArgs = {};
type VariantPropType = keyof PlasmicDsadas__VariantsArgs;
export const PlasmicDsadas__VariantProps = new Array<VariantPropType>();

export type PlasmicDsadas__ArgsType = {};
type ArgPropType = keyof PlasmicDsadas__ArgsType;
export const PlasmicDsadas__ArgProps = new Array<ArgPropType>();

export type PlasmicDsadas__OverridesType = {
  root?: p.Flex<"div">;
  ol?: p.Flex<"ol">;
  ul?: p.Flex<"ul">;
};

export interface DefaultDsadasProps {
  className?: string;
}

function PlasmicDsadas__RenderFunc(props: {
  variants: PlasmicDsadas__VariantsArgs;
  args: PlasmicDsadas__ArgsType;
  overrides: PlasmicDsadas__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___9OBy
        )}
      >
        <React.Fragment>
          <React.Fragment>{""}</React.Fragment>
          {
            <ol
              data-plasmic-name={"ol"}
              data-plasmic-override={overrides.ol}
              className={classNames(projectcss.all, projectcss.ol, sty.ol)}
            >
              <li
                className={classNames(
                  projectcss.all,
                  projectcss.li,
                  projectcss.__wab_text,
                  sty.li__bwd66
                )}
              >
                {"Enter some text\n\n\n-\n"}
              </li>
            </ol>
          }
          <React.Fragment>{""}</React.Fragment>
        </React.Fragment>
      </div>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__bXj3
        )}
      >
        <React.Fragment>
          <React.Fragment>{""}</React.Fragment>
          {
            <ul
              data-plasmic-name={"ul"}
              data-plasmic-override={overrides.ul}
              className={classNames(projectcss.all, projectcss.ul, sty.ul)}
            >
              <li
                className={classNames(
                  projectcss.all,
                  projectcss.li,
                  projectcss.__wab_text,
                  sty.li__o9Za
                )}
              >
                {"adsdsa"}
              </li>

              <li
                className={classNames(
                  projectcss.all,
                  projectcss.li,
                  projectcss.__wab_text,
                  sty.li__t8Pvd
                )}
              >
                {"fdsfds"}
              </li>

              <li
                className={classNames(
                  projectcss.all,
                  projectcss.li,
                  projectcss.__wab_text,
                  sty.li__ffQyp
                )}
              >
                {""}
              </li>
            </ul>
          }
          <React.Fragment>{""}</React.Fragment>
        </React.Fragment>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "ol", "ul"],
  ol: ["ol"],
  ul: ["ul"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  ol: "ol";
  ul: "ul";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDsadas__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDsadas__VariantsArgs;
    args?: PlasmicDsadas__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDsadas__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDsadas__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDsadas__ArgProps,
          internalVariantPropNames: PlasmicDsadas__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDsadas__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDsadas";
  } else {
    func.displayName = `PlasmicDsadas.${nodeName}`;
  }
  return func;
}

export const PlasmicDsadas = Object.assign(
  // Top-level PlasmicDsadas renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    ol: makeNodeComponent("ol"),
    ul: makeNodeComponent("ul"),

    // Metadata about props expected for PlasmicDsadas
    internalVariantProps: PlasmicDsadas__VariantProps,
    internalArgProps: PlasmicDsadas__ArgProps
  }
);

export default PlasmicDsadas;
/* prettier-ignore-end */
